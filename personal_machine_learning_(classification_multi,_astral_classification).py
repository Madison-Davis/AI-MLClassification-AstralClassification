# -*- coding: utf-8 -*-
"""Personal: Machine Learning (Classification: Multi, Astral Classification).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wEjOvWPUkJvuCG4oq28GB1uNO2ou_5wx
"""

# Multi Classification of Astral Classification
# Classifiers Tested: Random Forest, Logistic Regression, SVM
# Highest Accuracy: 100% Random Forest, 94% Logistic Regression, 92% SVM

# Installations
import csv
import numpy as np
from sklearn import svm
from matplotlib import pyplot as plt
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.metrics import accuracy_score

# Data Manipulation
# Data: https://www.kaggle.com/datasets/jahnveenarang/cvdcvd-vd
# Data Column Input:
  # 0: Absolute Temperature (in K)
  # 1: Relative Luminosity (L/Lo)
  # 2: Relative Radius (R/Ro)
  # 3: Absolute Magnitude (Mv)
  # 5: Star Color (White,Red,Blue,Yellow,Yellow-orange etc)
  # 6: Spectral Class (O, B, A, F, G, K, M)

# Spectral Class Output:
  # 4: Star Type
    # 0: Red Dwarf
    # 1: Brown Dwarf
    # 2: White Dwarf
    # 3: Main Sequence
    # 4: SuperGiants
    # 5: HyperGiants

# Training File
dataFile = open("//content//drive//MyDrive//Coding//Personal Projects//3: Machine Learning//Resources//AstralClassification.csv")
data = csv.reader(dataFile)
star_color = ["Blue", "Blue White", "White", "Whitish", "Yellow White", "Yellow", "Yellowish", "Yellow Orange", "Orange", "Orange Red", "Red"]
spectral_class = ["O", "B", "A", "F", "G", "K", "M"]
x = []
y = []

header = True
for row in data:
  if header:
    header = False
    continue
  else:
    y.append(float(row[4]))
    i = 0
    input_values = []
    while i < 6:
      if 0 <= i <= 3:
        input_values.append(float(row[i]))
      if i == 5: # column 5, star color
        input_values.append(float(star_color.index(row[i])))
      if i == 6: # column 6, spectral class
        input_values.append(float(spectral_class.index(row[i])))
      i = i + 1
    x.append(input_values)
  
standardizer = StandardScaler()
x = standardizer.fit_transform(x)

# Test Model: Random Forest
x_train, x_test, y_train, y_test = train_test_split(x, y , test_size = 0.20, random_state = 1)
model = RandomForestClassifier(n_estimators = 20, random_state = 0)
model.fit(x_train, y_train)
predictions = model.predict(x_test)

cm = confusion_matrix(y_test, predictions)
accuracy = accuracy_score(y_test, predictions)
accuracy = accuracy * 100
print(accuracy, "%")

# Test Model: Support Vector Machine
x_train, x_test, y_train, y_test = train_test_split(x, y , test_size = 0.20, random_state = 1)
model = svm.LinearSVC()
model.fit(x_train, y_train)
predictions = model.predict(x_test)

cm = confusion_matrix(y_test, predictions)
accuracy = accuracy_score(y_test, predictions)
accuracy = accuracy * 100
print(accuracy, "%")

# Test Model: Logistic Regression
x_train, x_test, y_train, y_test = train_test_split(x, y , test_size = 0.2, random_state = 0)
model = LogisticRegression()
model.fit(x_train, y_train)
predictions = model.predict(x_test)

cm = confusion_matrix(y_test, predictions)
accuracy = accuracy_score(y_test, predictions)
accuracy = accuracy * 100
print(accuracy, "%")